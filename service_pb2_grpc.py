# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import service_pb2 as service__pb2

GRPC_GENERATED_VERSION = '1.65.4'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class GameStub(object):
    """
    The Game service provides various RPC methods for interacting with a soccer simulation.

    ```mermaid
    sequenceDiagram
    participant SS as SoccerSimulationServer
    participant SP as SoccerSimulationProxy
    participant PM as PlayMakerServer
    Note over SS,PM: Run
    SP->>SS: Connect
    SS->>SP: OK, Unum
    SS->>SP: ServerParam
    SS->>SP: PlayerParam
    SS->>SP: PlayerType (0)
    SS->>SP: PlayerType (1)
    SS->>SP: PlayerType (17)
    SP->>PM: Register(RegisterRequest)
    PM->>SP: RegisterResponse
    SP->>PM: SendInitMessage(InitMessage)
    PM->>SP: Empty
    SP->>PM: SendServerParams(ServerParam)
    PM->>SP: Empty
    SP->>PM: SendPlayerParams(PlayerParam)
    PM->>SP: Empty
    SP->>PM: SendPlayerType(PlayerType(0))
    PM->>SP: Empty
    SP->>PM: SendPlayerType(PlayerType(1))
    PM->>SP: Empty
    SP->>PM: SendPlayerType(PlayerType(17))
    PM->>SP: Empty
    SS->>SP: Observation
    Note over SP: Convert observation to State
    SP->>PM: GetPlayerActions(State)
    PM->>SP: PlayerActions
    Note over SP: Convert Actions to Low-Level Commands
    SP->>SS: Commands
    ```
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPlayerActions = channel.unary_unary(
                '/protos.Game/GetPlayerActions',
                request_serializer=service__pb2.State.SerializeToString,
                response_deserializer=service__pb2.PlayerActions.FromString,
                _registered_method=True)
        self.GetCoachActions = channel.unary_unary(
                '/protos.Game/GetCoachActions',
                request_serializer=service__pb2.State.SerializeToString,
                response_deserializer=service__pb2.CoachActions.FromString,
                _registered_method=True)
        self.GetTrainerActions = channel.unary_unary(
                '/protos.Game/GetTrainerActions',
                request_serializer=service__pb2.State.SerializeToString,
                response_deserializer=service__pb2.TrainerActions.FromString,
                _registered_method=True)
        self.SendInitMessage = channel.unary_unary(
                '/protos.Game/SendInitMessage',
                request_serializer=service__pb2.InitMessage.SerializeToString,
                response_deserializer=service__pb2.Empty.FromString,
                _registered_method=True)
        self.SendServerParams = channel.unary_unary(
                '/protos.Game/SendServerParams',
                request_serializer=service__pb2.ServerParam.SerializeToString,
                response_deserializer=service__pb2.Empty.FromString,
                _registered_method=True)
        self.SendPlayerParams = channel.unary_unary(
                '/protos.Game/SendPlayerParams',
                request_serializer=service__pb2.PlayerParam.SerializeToString,
                response_deserializer=service__pb2.Empty.FromString,
                _registered_method=True)
        self.SendPlayerType = channel.unary_unary(
                '/protos.Game/SendPlayerType',
                request_serializer=service__pb2.PlayerType.SerializeToString,
                response_deserializer=service__pb2.Empty.FromString,
                _registered_method=True)
        self.Register = channel.unary_unary(
                '/protos.Game/Register',
                request_serializer=service__pb2.RegisterRequest.SerializeToString,
                response_deserializer=service__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.SendByeCommand = channel.unary_unary(
                '/protos.Game/SendByeCommand',
                request_serializer=service__pb2.RegisterResponse.SerializeToString,
                response_deserializer=service__pb2.Empty.FromString,
                _registered_method=True)
        self.GetBestPlannerAction = channel.unary_unary(
                '/protos.Game/GetBestPlannerAction',
                request_serializer=service__pb2.BestPlannerActionRequest.SerializeToString,
                response_deserializer=service__pb2.BestPlannerActionResponse.FromString,
                _registered_method=True)


class GameServicer(object):
    """
    The Game service provides various RPC methods for interacting with a soccer simulation.

    ```mermaid
    sequenceDiagram
    participant SS as SoccerSimulationServer
    participant SP as SoccerSimulationProxy
    participant PM as PlayMakerServer
    Note over SS,PM: Run
    SP->>SS: Connect
    SS->>SP: OK, Unum
    SS->>SP: ServerParam
    SS->>SP: PlayerParam
    SS->>SP: PlayerType (0)
    SS->>SP: PlayerType (1)
    SS->>SP: PlayerType (17)
    SP->>PM: Register(RegisterRequest)
    PM->>SP: RegisterResponse
    SP->>PM: SendInitMessage(InitMessage)
    PM->>SP: Empty
    SP->>PM: SendServerParams(ServerParam)
    PM->>SP: Empty
    SP->>PM: SendPlayerParams(PlayerParam)
    PM->>SP: Empty
    SP->>PM: SendPlayerType(PlayerType(0))
    PM->>SP: Empty
    SP->>PM: SendPlayerType(PlayerType(1))
    PM->>SP: Empty
    SP->>PM: SendPlayerType(PlayerType(17))
    PM->>SP: Empty
    SS->>SP: Observation
    Note over SP: Convert observation to State
    SP->>PM: GetPlayerActions(State)
    PM->>SP: PlayerActions
    Note over SP: Convert Actions to Low-Level Commands
    SP->>SS: Commands
    ```
    """

    def GetPlayerActions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCoachActions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTrainerActions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendInitMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendServerParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendPlayerParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendPlayerType(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendByeCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBestPlannerAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GameServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPlayerActions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPlayerActions,
                    request_deserializer=service__pb2.State.FromString,
                    response_serializer=service__pb2.PlayerActions.SerializeToString,
            ),
            'GetCoachActions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCoachActions,
                    request_deserializer=service__pb2.State.FromString,
                    response_serializer=service__pb2.CoachActions.SerializeToString,
            ),
            'GetTrainerActions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrainerActions,
                    request_deserializer=service__pb2.State.FromString,
                    response_serializer=service__pb2.TrainerActions.SerializeToString,
            ),
            'SendInitMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendInitMessage,
                    request_deserializer=service__pb2.InitMessage.FromString,
                    response_serializer=service__pb2.Empty.SerializeToString,
            ),
            'SendServerParams': grpc.unary_unary_rpc_method_handler(
                    servicer.SendServerParams,
                    request_deserializer=service__pb2.ServerParam.FromString,
                    response_serializer=service__pb2.Empty.SerializeToString,
            ),
            'SendPlayerParams': grpc.unary_unary_rpc_method_handler(
                    servicer.SendPlayerParams,
                    request_deserializer=service__pb2.PlayerParam.FromString,
                    response_serializer=service__pb2.Empty.SerializeToString,
            ),
            'SendPlayerType': grpc.unary_unary_rpc_method_handler(
                    servicer.SendPlayerType,
                    request_deserializer=service__pb2.PlayerType.FromString,
                    response_serializer=service__pb2.Empty.SerializeToString,
            ),
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=service__pb2.RegisterRequest.FromString,
                    response_serializer=service__pb2.RegisterResponse.SerializeToString,
            ),
            'SendByeCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.SendByeCommand,
                    request_deserializer=service__pb2.RegisterResponse.FromString,
                    response_serializer=service__pb2.Empty.SerializeToString,
            ),
            'GetBestPlannerAction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBestPlannerAction,
                    request_deserializer=service__pb2.BestPlannerActionRequest.FromString,
                    response_serializer=service__pb2.BestPlannerActionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'protos.Game', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('protos.Game', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Game(object):
    """
    The Game service provides various RPC methods for interacting with a soccer simulation.

    ```mermaid
    sequenceDiagram
    participant SS as SoccerSimulationServer
    participant SP as SoccerSimulationProxy
    participant PM as PlayMakerServer
    Note over SS,PM: Run
    SP->>SS: Connect
    SS->>SP: OK, Unum
    SS->>SP: ServerParam
    SS->>SP: PlayerParam
    SS->>SP: PlayerType (0)
    SS->>SP: PlayerType (1)
    SS->>SP: PlayerType (17)
    SP->>PM: Register(RegisterRequest)
    PM->>SP: RegisterResponse
    SP->>PM: SendInitMessage(InitMessage)
    PM->>SP: Empty
    SP->>PM: SendServerParams(ServerParam)
    PM->>SP: Empty
    SP->>PM: SendPlayerParams(PlayerParam)
    PM->>SP: Empty
    SP->>PM: SendPlayerType(PlayerType(0))
    PM->>SP: Empty
    SP->>PM: SendPlayerType(PlayerType(1))
    PM->>SP: Empty
    SP->>PM: SendPlayerType(PlayerType(17))
    PM->>SP: Empty
    SS->>SP: Observation
    Note over SP: Convert observation to State
    SP->>PM: GetPlayerActions(State)
    PM->>SP: PlayerActions
    Note over SP: Convert Actions to Low-Level Commands
    SP->>SS: Commands
    ```
    """

    @staticmethod
    def GetPlayerActions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/protos.Game/GetPlayerActions',
            service__pb2.State.SerializeToString,
            service__pb2.PlayerActions.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCoachActions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/protos.Game/GetCoachActions',
            service__pb2.State.SerializeToString,
            service__pb2.CoachActions.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTrainerActions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/protos.Game/GetTrainerActions',
            service__pb2.State.SerializeToString,
            service__pb2.TrainerActions.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendInitMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/protos.Game/SendInitMessage',
            service__pb2.InitMessage.SerializeToString,
            service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendServerParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/protos.Game/SendServerParams',
            service__pb2.ServerParam.SerializeToString,
            service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendPlayerParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/protos.Game/SendPlayerParams',
            service__pb2.PlayerParam.SerializeToString,
            service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendPlayerType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/protos.Game/SendPlayerType',
            service__pb2.PlayerType.SerializeToString,
            service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/protos.Game/Register',
            service__pb2.RegisterRequest.SerializeToString,
            service__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendByeCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/protos.Game/SendByeCommand',
            service__pb2.RegisterResponse.SerializeToString,
            service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBestPlannerAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/protos.Game/GetBestPlannerAction',
            service__pb2.BestPlannerActionRequest.SerializeToString,
            service__pb2.BestPlannerActionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
